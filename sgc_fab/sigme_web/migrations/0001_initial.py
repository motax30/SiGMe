# Generated by Django 4.1.7 on 2023-03-06 02:02

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import sigme_web.utils.cpf_validator


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('email', models.EmailField(max_length=254, verbose_name='Endereço de email')),
                ('cpf', models.CharField(blank=True, max_length=11, null=True, unique=True, validators=[sigme_web.utils.cpf_validator.validate_cpf], verbose_name='CPF')),
                ('identity_document_type', models.CharField(blank=True, choices=[('ID_MILITAR', 'Carteira de Identidade Militar (RA, RE, RM)'), ('RG', 'Carteira de Identidade Civil (RG)'), ('CARTEIRA', 'Carteira de Identificação de Orgão Fiscalizador (Ordens, Conselhos, etc)'), ('Passaporte', 'Passaporte'), ('CARTEIRA_MIN_PUBLICO', 'Carteira Funcional do Ministério Público'), ('RESERVISTA', 'Certificado de Reservista'), ('CARTEIRA_FUNCIONAL)', 'Carteira Funcional Expedida por Órgão Público'), ('CTPS', 'Carteira de Trabalho e Previdência Social'), ('CNH', 'Carteira Nacional de Habilitação')], max_length=30, null=True, verbose_name='Tipo')),
                ('identity_document_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Numero')),
                ('identity_document_issuer', models.CharField(blank=True, max_length=15, null=True, verbose_name='Orgão Emissor')),
                ('identity_document_uf', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, null=True, verbose_name='UF')),
                ('identity_document_nationality', models.CharField(blank=True, max_length=10, null=True, verbose_name='País de Origem')),
                ('ldap_uid', models.CharField(blank=True, max_length=255, null=True, verbose_name='LDAP uid')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('teacher', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='associação')),
            ],
        ),
        migrations.CreateModel(
            name='Funcao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Sigla')),
                ('descricao_curta', models.CharField(max_length=255, verbose_name='Descrição Curta da Função')),
                ('descricao_longa', models.CharField(blank=True, max_length=255, null=True, verbose_name='Descrição Longa da Função')),
                ('dt_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
            ],
            options={
                'verbose_name_plural': 'Funções',
            },
        ),
        migrations.CreateModel(
            name='Permissao',
            fields=[
                ('id', models.CharField(choices=[('ROTEIRIZAR_UNIDADES_ESTUDO', 'ROTEIRIZAR_UNIDADES_ESTUDO')], max_length=255, primary_key=True, serialize=False, verbose_name='Permissão')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Descrição')),
                ('active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modificado em')),
            ],
            options={
                'verbose_name': 'Permissão',
                'verbose_name_plural': 'Permissões',
            },
        ),
        migrations.CreateModel(
            name='Tarefa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=256, verbose_name='Descrição')),
                ('duration', models.DurationField()),
            ],
        ),
        migrations.CreateModel(
            name='UnidadeEstudo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('tarefas', models.ManyToManyField(to='sgc_web.tarefa', verbose_name='tarefas')),
            ],
            options={
                'verbose_name_plural': 'Unidades de Estudo',
            },
        ),
        migrations.CreateModel(
            name='Roteiro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disciplina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sgc_web.disciplina')),
                ('study_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sgc_web.unidadeestudo', verbose_name='Unidades de Estudo')),
            ],
        ),
        migrations.CreateModel(
            name='MetaEstudo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inicio', models.DateTimeField(verbose_name='Data de Início')),
                ('termino', models.DateTimeField(verbose_name='Data limite')),
                ('descricao', models.CharField(max_length=256)),
                ('roteiros', models.ManyToManyField(to='sgc_web.roteiro')),
            ],
        ),
        migrations.CreateModel(
            name='FuncaoPessoa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.PositiveIntegerField(choices=[(0, ''), (1, 'Permanente'), (2, 'Temporário')], default=1)),
                ('data_inicio', models.DateField(help_text='Início da vigência', verbose_name='Data Inicial')),
                ('data_fim', models.DateField(blank=True, help_text='Término da vigência', null=True, verbose_name='Data Final')),
                ('funcao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sgc_web.funcao')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Associação',
                'verbose_name_plural': 'Associações',
            },
        ),
        migrations.AddField(
            model_name='funcao',
            name='permissoes',
            field=models.ManyToManyField(blank=True, to='sgc_web.permissao', verbose_name='Permissões'),
        ),
        migrations.AddField(
            model_name='funcao',
            name='pessoas',
            field=models.ManyToManyField(related_name='funcoes', through='sgc_web.FuncaoPessoa', to=settings.AUTH_USER_MODEL),
        ),
    ]
